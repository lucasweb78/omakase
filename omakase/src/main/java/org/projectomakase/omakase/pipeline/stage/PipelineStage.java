/*
 * #%L
 * omakase
 * %%
 * Copyright (C) 2015 Project Omakase LLC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package org.projectomakase.omakase.pipeline.stage;

import org.projectomakase.omakase.callback.CallbackEvent;

/**
 * Pipeline Stage interface. Implementations of this interface represent a stage in the pipeline.
 *
 * @author Richard Lucas
 */
public interface PipelineStage {

    /**
     * Executes prepare on the pipeline for the current stage.
     * <p>
     * Prepare can be used to either complete the current pipeline stage if no long running actions need to be performed or it can be used to delegate the action to a background process for
     * asynchronous processing.
     * </p>
     * <p>
     * Prepare returns a {@link PipelineStageResult} that contains the pipeline stage's status, any properties that need to be added to the pipeline and any messages returned by the stage.
     * </p>
     *
     * @param pipelineContext
     *         the pipeline context
     * @return a {@link PipelineStageResult} containing the updated pipeline and any messages generated by the pipeline stage.
     */
    PipelineStageResult prepare(PipelineContext pipelineContext);

    /**
     * Handles callback events, sent during asynchronous processing of the pipeline, for the current stage in the pipeline pipeline.
     * <p>
     * OnCallback can be used to handle both intermediate callback events that provide status updates and terminating callback events that provide the final status.
     * </p>
     * <p>
     * OnCallback returns a {@link PipelineStageResult} that contains the pipeline stage's status, any properties that need to be added to the pipeline and any messages returned by the stage.
     * </p>
     *
     * @param pipelineContext
     *         the pipeline context
     * @param callbackEvent
     *         the callback event
     * @return a {@link PipelineStageResult} containing the updated pipeline and any messages generated by the pipeline stage.
     */
    PipelineStageResult onCallback(PipelineContext pipelineContext, CallbackEvent callbackEvent);
}
